{"version":3,"file":"router.production.min.js","sources":["../history.ts","../utils.ts","../router.ts","../index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch } from \"./router\";\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath, History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport {\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { ErrorResponse, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (\n      state.navigation.state === \"submitting\" &&\n      state.navigation.formMethod !== \"get\"\n    ) {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    if (opts?.pendingError) {\n      let boundaryMatch = findNearestBoundary(matches);\n      completeNavigation(historyAction, location, {\n        matches,\n        errors: {\n          [boundaryMatch.route.id]: opts?.pendingError,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n      let isPush = opts?.replace !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    isPush = false\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(\n      isPush ? HistoryAction.Push : HistoryAction.Replace,\n      navigation.location,\n      { overrideNavigation: navigation }\n    );\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: resultType, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: DataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  generatePath,\n  getToPathname,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"],"names":["Action","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","createLocation","pathname","location","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","search","hash","usr","createHashHistory","parsePath","substr","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","getHistoryState","current","random","toString","charAt","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","handlePop","Error","addEventListener","removeEventListener","historyState","pushState","error","assign","replaceState","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","parentsMeta","parentPath","forEach","route","relativePath","caseSensitive","startsWith","invariant","joinPaths","concat","children","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","regexpSource","paramName","endsWith","RegExp","compilePath","captureGroups","memo","splatValue","value","decodeURIComponent","safelyDecodeURIComponent","toLowerCase","startIndex","nextChar","message","warning","cond","console","warn","e","resolvePath","fromPathname","toPathname","pop","join","resolvePathname","normalizeSearch","normalizeHash","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","JSON","stringify","redirect","ErrorResponse","constructor","statusText","this","isRouteErrorResponse","ResultType","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","subscriber","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","router","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","pendingNavigationController","historyAction","initialized","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","HistoryAction","async","startNavigation","opts","abort","startUninterruptedRevalidation","saveScrollPosition","resetScroll","loadingNavigation","overrideNavigation","notFoundMatches","pendingError","findNearestBoundary","pendingActionData","pendingActionError","submission","actionOutput","hasNakedIndexQuery","result","actionMatch","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","shortCircuited","type","isRedirectResult","redirectNavigation","isPush","startRedirectNavigation","isErrorResult","handleAction","matchesToLoad","revalidatingFetchers","getMatchesToLoad","revalidatingFetcher","get","abortController","results","Promise","all","navigationResults","fetcherResults","delete","findRedirect","getLoaderRedirect","processLoaderData","doneKeys","fetcher","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","revalidate","abortFetcher","controller","keys","doneFetcher","landedId","yeetedKeys","y","initialize","subscribe","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeNavigateOptions","fetch","routeId","actionResult","add","loadingFetcher","boundaryMatch","loadId","loadFetcher","staleKey","loaderResults","loaderRedirect","handleFetcherAction","handleFetcherLoader","deleteFetcher","dispose","_internalFetchControllers","allIds","treePath","searchParams","URLSearchParams","name","append","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","shouldRevalidateLoader","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","resultType","handler","request","createRequest","text","Request","body","method","toUpperCase","mergedLoaderData","reverse","find","errorElement","r","getAll","v","origin","URL","createMemoryRouter","routerInit","createBrowserRouter","createHashRouter"],"mappings":"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"}