{"version":3,"file":"router.development.js","sources":["../../history.ts","../../utils.ts","../../router.ts","../../index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch } from \"./router\";\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath, History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport {\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { ErrorResponse, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (\n      state.navigation.state === \"submitting\" &&\n      state.navigation.formMethod !== \"get\"\n    ) {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    if (opts?.pendingError) {\n      let boundaryMatch = findNearestBoundary(matches);\n      completeNavigation(historyAction, location, {\n        matches,\n        errors: {\n          [boundaryMatch.route.id]: opts?.pendingError,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n      let isPush = opts?.replace !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    isPush = false\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(\n      isPush ? HistoryAction.Push : HistoryAction.Replace,\n      navigation.location,\n      { overrideNavigation: navigation }\n    );\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: resultType, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: DataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  generatePath,\n  getToPathname,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","readOnly","obj","Object","freeze","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","forEach","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","redirect","ErrorResponse","constructor","statusText","isRouteErrorResponse","ResultType","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","subscriber","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","router","historyAction","initialized","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","initialize","startNavigation","HistoryAction","dispose","abort","controller","subscribe","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","submission","normalizeNavigateOptions","resetScroll","pendingError","revalidate","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","boundaryMatch","findNearestBoundary","isHashChangeOnly","pendingActionData","pendingActionError","actionOutput","handleAction","shortCircuited","handleLoaders","hasNakedIndexQuery","result","actionMatch","type","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectNavigation","isPush","startRedirectNavigation","isErrorResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","revalidatingFetcher","get","abortController","results","Promise","all","navigationResults","fetcherResults","delete","findRedirect","getLoaderRedirect","processLoaderData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","routeId","abortFetcher","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","add","loadId","loadFetcher","staleKey","loaderResults","loaderRedirect","doneFetcher","deleteFetcher","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","enableScrollRestoration","positions","getPosition","getKey","y","_internalFetchControllers","allIds","treePath","dataRoute","searchParams","URLSearchParams","name","append","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","resultType","handler","request","createRequest","text","Request","body","method","toUpperCase","mergedLoaderData","eligibleMatches","reverse","find","errorElement","r","getAll","v","origin","URL","createMemoryRouter","routerInit","createBrowserRouter","createHashRouter"],"mappings":"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"}